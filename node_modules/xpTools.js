/**
 *	@overview Toolset functions in JS for general purposes.
 *
 *	@copyright <a href="http://www.crs4.it">CRS4 2013</a>
 *	@author Simone Kalb <kalb@crs4.it> 
 *	@author Gian Maria Simbula <simbula@crs4.it>
 *	
 *	@summary: Original work by Gian Maria Simbula
 *	eMail: simbula@sardegnaricerche.it
 *	eMail: simbula@crs4.it 
 */
var fs = require('fs');

var appEnviroment;

/**
 * It checks for an existing configuration file at the passed path. If reading is successful it initializes appEnviroments and, hereafter, returns it.
 * @method getConfigurationData
 * @param  {string}             confFile The path to the JSON configuration file, default is JSON/configuration.json.
 * @return {HashTable} If successful or already instaced, it returns an hashtable with the proper app enviroment.
 */
function getConfigurationData(confFile){
	if(typeof(confFile) === 'undefined') confFile = "/JSON/configuration.json";

	if(typeof(appEnviroment) === 'undefined') {
		var c_file;
		try {
			c_file = fs.readFileSync(confFile, 'utf8');
		} catch (err){
			throw "Execution stopped! \n" + err;
		}
		if(c_file == "") {
			throw "Execution stopped!\nEmpty configuration file. Please set the parameters in [INSTALLATION_ROOT]/JSON/configuration.json!";
		} else {
			appEnviroment = JSON.parse(c_file);
			return appEnviroment;
		}
	} else {
		return appEnviroment;
	}
}

/**
 * It returns the time of the day in ms since epoch
 * @method gettimeofday
 * @param  {boolean}     return_float Used to generate a float or not-float returned value.
 * @return {long/float} It returns a timestamp as long value or float value, according to related parameter.
 */
function gettimeofday (return_float) { 
  var t = new Date(),
    y = 0;

  if (return_float) {
    return t.getTime() / 1000;
  }

  y = t.getFullYear(); // Store current year.
  return {
    sec: t.getUTCSeconds(),
    usec: t.getUTCMilliseconds() * 1000,
    minuteswest: t.getTimezoneOffset(),
    // Compare Jan 1 minus Jan 1 UTC to Jul 1 minus Jul 1 UTC to see if DST is observed.
    dsttime: 0 + (((new Date(y, 0)) - Date.UTC(y, 0)) !== ((new Date(y, 6)) - Date.UTC(y, 6)))
  };
}

/**
 * It converts a string to a byte array object
 * @method toByteArray
 * @param  {HashTable}    message The hashtable to convert in ByteArray
 * @return {ByteArray} It returns the converted message.
 */
function toByteArray(message) {
	var toSend = "";
	for (var property in message) {
	    if (message.hasOwnProperty(property)) {	
	    	toSend += property.toString();
	    	toSend += message[property].toString();
		}
	}

	var numCouples = 0;
	for (var property in message) {
		numCouples++;
	}

	var bufferSize = 8 + toSend.length + numCouples * 4 + numCouples * 4;
	//numCouples(4Byte) + bytes propertylist + keysizes(4byte each) + valuesizes(4byte each)
	var buffer = new Buffer(bufferSize);
	//num couples to byte --> UINT32
	buffer.writeUInt32BE(bufferSize, 0);
	buffer.writeUInt32BE(numCouples, 4);
	var offset = 8;
	for (var property in message) {
	    if (message.hasOwnProperty(property)) {
		    //keysize
		    buffer.writeUInt32BE(property.toString().length, offset);
		    //key
		    offset+= 4;
		    buffer.write(property.toString(), offset, property.toString().length, 'utf8');
		    //valuesize
		  	offset+= property.toString().length;
		    buffer.writeUInt32BE(message[property].toString().length, offset);
		    //value
		    offset+= 4;
		    buffer.write(message[property].toString(), offset, message[property].toString().length, 'utf8');
		    offset += message[property].toString().length;
		}
	}
	
	return buffer;
}

/**
 * It prints a byte array object
 * @method printByteArray
 * @param  {ByteArray}       msg The ByteArray to print in log console.
 * 
 */
function printByteArray(msg) {
	xpLog(false, "\nMessage Length " + msg.length);
	var messageSize = msg.readUInt32BE(0);
	xpLog(false, "Data size: " + messageSize);
	var numCouples = msg.readUInt32BE(4);
	xpLog(false, "Num Couples: " + numCouples);
	xpLog(false, "Key:Value Couples:");
	var offset = 8;
	while(offset < msg.length) {
		//xpLog(false, "Offset is: " + offset);
		var keySize = msg.readUInt32BE(offset);
		//xpLog(false, "keySize:" + keySize);
		offset += 4;
		var key = msg.toString('utf8', offset, offset + keySize);
		offset += keySize;
		var valueSize = msg.readUInt32BE(offset);
		//xpLog(false, "valueSize:" + valueSize);
		offset += 4;
		var value = msg.toString('utf8', offset, offset + valueSize);
		offset += valueSize;
		xpLog(false, key + ":" + value);
	}
	xpLog(false, "\n");
}

/**
 * It generates a random string, according to the specified parameters
 * @method randomString
 * @param  {integer}     stringLength The lenght of the random string.
 * @param  {boolean}     letters Enable/disable letters in returned random string.
 * @param  {boolean}     numbers Enable/disable numbers in returned random string.
 * @param  {boolean}     symbols Enable/disable symbols in returned random string.
 * @return {string} It returns a random string, according to passed parameters.
 */
function randomString(stringLength, letters, numbers, symbols) {
    var allPossible = ""; // this will contain all necessary characters
    var str = ""; // the random string
    if (letters == true) { // if you passed true for letters, we'll add letters to the possibilities
        for (i = 65; i <= 90; i++) {
            allPossible += String.fromCharCode(i);
            allPossible += String.fromCharCode(i+32); // add a lower case letter, too!
        }
    } if (numbers == true) { // if you wanted numbers, we'll add numbers
        for (i = 48; i <= 57; i++) {
            allPossible += String.fromCharCode(i);
        }
    } if (symbols == true) { // if you want symbols, we'll add symbols (note, their ASCII values are scattered)
        for (i = 33; i <= 47; i++) {
            allPossible += String.fromCharCode(i);
        } for (i = 58; i <= 64; i++) {
            allPossible += String.fromCharCode(i);
        } for (i = 91; i <= 96; i++) {
            allPossible += String.fromCharCode(i);
        } for (i = 123; i <= 126; i++) {
            allPossible += String.fromCharCode(i);
        }
    }
    // get the number of characters to use (used for rand())
     numberOfPossibilities = allPossible.length;



    for (i = 0; i < stringLength; i++) {
    	var range = Math.floor(Math.random() * (Math.pow(2, 53) - 1));
        str += allPossible[range % numberOfPossibilities];
    }

    return str;
}

/**
 * It converts a byte array object into an HashTable
 * @method datagramToHash
 * @param  {ByteArray}       datagram The ByteArray to convert as HashTable
 * @return {HashTable} It returns the converted ByteArray as HashTable.
 */
function datagramToHash(datagram) {
	// TODO Define an Hashtable as in 
	// http://www.mojavelinux.com/articles/javascript_hashes.html
	var xpProperties = new Object();
	var messageSize = datagram.readUInt32BE(0);
	var numCouples = datagram.readUInt32BE(4);

	var offset = 8;
	while(offset < datagram.length) {
		var keySize = datagram.readUInt32BE(offset);
		offset += 4;
		var key = datagram.toString('utf8', offset, offset + keySize);
		offset += keySize;
		var valueSize = datagram.readUInt32BE(offset);
		offset += 4;
		var value = datagram.toString('utf8', offset, offset + valueSize);
		offset += valueSize;
		xpProperties[key] = value;
	}
 	return xpProperties;
}

/**
 * It prints an HashTable as key-value pairs
 * @method printHash
 * @param  {HashTable}  hashTable The hashtable to print as key/value pairs.
 * 
 */
function printHash(hashTable) {
	for(key in hashTable){
		xpLog(false, "Key: "+key+" Value: "+ hashTable[key]+"\n");
	}
}

/**
 * It implements a XOR operator
 * @method XOR
 * @param  {long} a Left operand
 * @param  {long} b Right operand
 * @return {long} It returns the result of the XOR operation
 */
function XOR(a,b) {
  return ( a & !b ) | ( !a & b );
}

/**
 * It extends Array object by implementing remove operation
 * @method remove
 * @param  {integer} from Starting index
 * @param  {integer} to Ending index
 * @return {Array} It returns the resized array.
 */
Array.prototype.remove = function(from, to) {
  var rest = this.slice((to || from) + 1 || this.length);
  this.length = from < 0 ? this.length + from : from;
  return this.push.apply(this, rest);
};

/**
 * It implements a log printing according to the specified parameters and the configuration file
 * @method xpLog
 * @param  {boolean} debug Enable/disable the prepended string "[DEBUG]" in output.
 * @param  {string} str The string to print in the console log.
 * @param  {boolean} forced It forces the log printing avoiding configuration file.
 * 
 */
function xpLog(debug, str, forced) {
	if(typeof(forced)==='undefined') forced = false;
	
	if(forced == true) {
		if(debug){
			str = "[FORCED DEBUG] "+str;
			console.log(str);
		}
		else {
			str = "[FORCED] "+str;
			console.log(str);
		}
	} else if(appEnviroment.args.verbose) {
		if(debug){
			str = "[DEBUG] "+str;
			console.log(str);
		}
		else {
			console.log(str);
		}
	} 
}


exports.XOR = XOR;
exports.printHash = printHash;
exports.datagramToHash = datagramToHash;
exports.randomString = randomString;
exports.toByteArray = toByteArray;
exports.printByteArray = printByteArray;
exports.xpLog = xpLog;
exports.getConfigurationData = getConfigurationData;
exports.appEnviroment = appEnviroment;